import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';

const JobSearchForm = ({ initialValues = {}, specialties = [], locations = [] }) => {
  const router = useRouter();
  const [searchParams, setSearchParams] = useState({
    keyword: initialValues.keyword || '',
    specialty: initialValues.specialty || '',
    location: initialValues.location || '',
    radius: initialValues.radius || '50',
  });

  // Update form when URL params change
  useEffect(() => {
    if (Object.keys(router.query).length > 0) {
      setSearchParams({
        keyword: router.query.keyword || '',
        specialty: router.query.specialty || '',
        location: router.query.location || '',
        radius: router.query.radius || '50',
      });
    }
  }, [router.query]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setSearchParams((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Build query parameters
    const queryParams = new URLSearchParams();
    
    if (searchParams.keyword) {
      queryParams.append('keyword', searchParams.keyword);
    }
    
    if (searchParams.specialty) {
      queryParams.append('specialty', searchParams.specialty);
    }
    
    if (searchParams.location) {
      queryParams.append('location', searchParams.location);
    }
    
    if (searchParams.radius && searchParams.location) {
      queryParams.append('radius', searchParams.radius);
    }
    
    // Navigate to search results page
    router.push(`/jobs/search?${queryParams.toString()}`);
  };

  return (
    <form onSubmit={handleSubmit} className="w-full max-w-4xl mx-auto">
      <div className="flex flex-col md:flex-row gap-4">
        {/* Keyword Search */}
        <div className="flex-1">
          <label htmlFor="keyword" className="sr-only">
            Job Title or Keyword
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
              </svg>
            </div>
            <input
              type="text"
              id="keyword"
              name="keyword"
              value={searchParams.keyword}
              onChange={handleChange}
              className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Job title or keyword"
            />
          </div>
        </div>

        {/* Specialty Dropdown */}
        <div className="flex-1">
          <label htmlFor="specialty" className="sr-only">
            Specialty
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
              </svg>
            </div>
            <select
              id="specialty"
              name="specialty"
              value={searchParams.specialty}
              onChange={handleChange}
              className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">All Specialties</option>
              {specialties.map((specialty) => (
                <option key={specialty.name} value={specialty.name}>
                  {specialty.name} ({specialty.count})
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Location Search */}
        <div className="flex-1">
          <label htmlFor="location" className="sr-only">
            Location
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
              </svg>
            </div>
            <input
              type="text"
              id="location"
              name="location"
              value={searchParams.location}
              onChange={handleChange}
              className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="City, state, or zip"
              list="location-options"
            />
            <datalist id="location-options">
              {locations.map((location) => (
                <option key={`${location.state}`} value={location.state}>
                  {location.state} ({location.count})
                </option>
              ))}
              {locations.flatMap((location) =>
                location.cities.map((city) => (
                  <option key={`${city.name}-${location.state}`} value={`${city.name}, ${location.state}`}>
                    {city.name}, {location.state} ({city.count})
                  </option>
                ))
              )}
            </datalist>
          </div>
        </div>

        {/* Search Button */}
        <div>
          <button
            type="submit"
            className="w-full md:w-auto px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Search Jobs
          </button>
        </div>
      </div>

      {/* Radius Filter (only shown when location is provided) */}
      {searchParams.location && (
        <div className="mt-3 flex items-center">
          <label htmlFor="radius" className="mr-2 text-sm text-gray-600">
            Within:
          </label>
          <select
            id="radius"
            name="radius"
            value={searchParams.radius}
            onChange={handleChange}
            className="text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="10">10 miles</option>
            <option value="25">25 miles</option>
            <option value="50">50 miles</option>
            <option value="100">100 miles</option>
            <option value="250">250 miles</option>
          </select>
        </div>
      )}
    </form>
  );
};

export default JobSearchForm;