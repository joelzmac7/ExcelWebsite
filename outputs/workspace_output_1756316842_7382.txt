# Excel Medical Staffing AI Platform

An AI-powered healthcare staffing platform designed to scale Excel Medical Staffing from 80 travelers to 7,000+ active assignments in one year.

## Project Overview

The Excel Medical Staffing AI Platform is a comprehensive solution that leverages artificial intelligence to streamline the healthcare staffing process. The platform includes:

- Mobile-first job search and application flow
- AI-powered job matching and recommendations
- Resume parsing and candidate profile generation
- Conversational AI assistant for job search and support
- Recruiter tools for candidate management and job sharing
- Compliance automation for license verification
- Content generation for city guides and job descriptions
- Advanced analytics and insights for data-driven decisions

## Architecture

The platform follows a microservices architecture with the following components:

### Frontend
- Next.js (React) with Tailwind CSS
- Mobile-first responsive design
- Progressive Web App (PWA) capabilities
- SEO optimization for healthcare job searches

### Backend
- Node.js with Express
- PostgreSQL for structured data
- MongoDB for unstructured data
- RESTful API with JWT authentication

### AI Components
- Resume Parser: Extracts structured data from healthcare resumes
- Job Matching Engine: Matches candidates with optimal job opportunities
- Conversational AI: Natural language job search and application guidance
- Content Generator: Creates city guides and job descriptions
- Compliance AI: Automates license verification and credential validation
- Candidate Journey Analyzer: Tracks and optimizes the application process
- AI Insights Engine: Provides actionable insights for recruiters and leadership

### Infrastructure
- Docker containers for all services
- Kubernetes for orchestration
- AWS cloud infrastructure
- CI/CD pipeline with GitHub Actions

## Getting Started

### Prerequisites

- Node.js 18+
- Python 3.9+
- Docker and Docker Compose
- PostgreSQL 14+
- MongoDB 5+
- AWS CLI

### Installation

1. Clone the repository:
```bash
git clone https://github.com/excel-medical/staffing-platform.git
cd staffing-platform
```

2. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your configuration
```

3. Start the development environment:
```bash
docker-compose up -d
```

4. Install frontend dependencies:
```bash
cd frontend
npm install
npm run dev
```

5. Install backend dependencies:
```bash
cd ../backend
npm install
npm run dev
```

6. Set up AI components:
```bash
cd ../ai
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt
python -m spacy download en_core_web_lg
```

### Database Setup

1. Initialize PostgreSQL:
```bash
cd backend
npx prisma migrate dev
npx prisma db seed
```

2. MongoDB collections will be created automatically when the application runs.

## Project Structure

```
excel-medical-staffing/
├── frontend/                # Next.js frontend application
│   ├── public/              # Static assets
│   ├── src/                 # Source code
│   │   ├── components/      # React components
│   │   ├── pages/           # Next.js pages
│   │   ├── hooks/           # Custom React hooks
│   │   ├── store/           # Redux store
│   │   ├── services/        # API services
│   │   ├── utils/           # Utility functions
│   │   ├── styles/          # CSS and style files
│   │   └── types/           # TypeScript type definitions
│   └── ...
├── backend/                 # Node.js backend application
│   ├── src/                 # Source code
│   │   ├── api/             # API routes and controllers
│   │   ├── models/          # Data models
│   │   ├── services/        # Business logic services
│   │   ├── utils/           # Utility functions
│   │   ├── middleware/      # Express middleware
│   │   └── config/          # Configuration files
│   ├── prisma/              # Prisma ORM files
│   └── ...
├── ai/                      # AI components
│   ├── src/                 # Source code
│   │   ├── resume-parser/   # Resume parsing service
│   │   ├── job-matcher/     # Job matching service
│   │   ├── conversation-ai/ # Conversational AI service
│   │   └── content-generator/ # Content generation service
│   └── ...
├── infrastructure/          # Infrastructure as code
│   ├── terraform/           # Terraform configurations
│   ├── kubernetes/          # Kubernetes manifests
│   └── ci-cd/              # CI/CD configurations
└── docs/                    # Project documentation
    ├── architecture/        # Architecture diagrams and docs
    ├── api/                 # API documentation
    └── user-guides/         # User guides and manuals
```

## Development Workflow

### Branching Strategy

- `main`: Production-ready code
- `develop`: Integration branch for features
- `feature/*`: Feature branches
- `bugfix/*`: Bug fix branches
- `release/*`: Release preparation branches

### Commit Message Format

```
<type>(<scope>): <subject>

<body>

<footer>
```

Types: feat, fix, docs, style, refactor, test, chore
Example: `feat(job-board): implement job filtering by specialty`

### Pull Request Process

1. Create a feature branch from `develop`
2. Implement your changes with appropriate tests
3. Create a pull request to merge back to `develop`
4. Ensure CI checks pass and get code review approval
5. Squash and merge to `develop`

## Testing

### Frontend Testing

```bash
cd frontend
npm run test        # Run unit tests
npm run test:e2e    # Run end-to-end tests
npm run test:coverage # Run tests with coverage report
```

### Backend Testing

```bash
cd backend
npm run test        # Run unit tests
npm run test:integration # Run integration tests
npm run test:coverage # Run tests with coverage report
```

### AI Components Testing

```bash
cd ai
source venv/bin/activate  # On Windows: venv\Scripts\activate
pytest                    # Run all tests
pytest tests/resume-parser # Run specific test suite
```

## Deployment

### Staging Deployment

Staging deployment is automatically triggered when changes are merged to the `develop` branch.

### Production Deployment

Production deployment is triggered manually after approval from the release manager.

```bash
# Deploy to production
npm run deploy:production
```

## Documentation

- [Project Documentation](docs/README.md)
- [API Documentation](docs/api/README.md)
- [Architecture Documentation](docs/architecture/README.md)
- [User Guides](docs/user-guides/README.md)

## Implementation Roadmap

### Phase 1: Foundation (Months 1-2)
- Development environment and infrastructure
- LaborEdge API integration
- Database implementation
- Core frontend components
- AI infrastructure setup

### Phase 2: Core Functionality (Months 3-4)
- Job board implementation
- Application flow
- Resume parsing and job matching
- Recruiter portal
- Basic analytics

### Phase 3: Advanced Features & Scaling (Months 5-8)
- Conversational AI assistant
- Content generation
- Marketing automation
- Compliance workflow
- Advanced analytics

### Phase 4: Optimization & Growth (Months 9-12)
- Performance optimization
- AI enhancement
- A/B testing framework
- Advanced reporting
- Final scaling

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is proprietary and confidential. Unauthorized copying, distribution, or use is strictly prohibited.

## Acknowledgments

- Excel Medical Staffing leadership for their vision and support
- NinjaTech AI team for technical implementation
- Healthcare professionals who provided valuable feedback during design